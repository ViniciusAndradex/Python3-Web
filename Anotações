Seção Básica:
    Comentários:
        # : Deixa o código comentado.
        """/''': São docstrings, porém servem como comentário.
        OBS: Padrão da comunidade, 2 espaços em caso de já existir algum dado
             na linha.

    Print:
        print(): Escreva.
        print('',''): Por padrão a vírgula representa espaço.
        print('','', sep='-'): Por padrão a vírgula representa espaço, o sep indica o tipo do separador.
        print('','', sep='-', end=''): Por padrão a vírgula representa espaço,
                                       o sep indica o tipo do separador, end='' não quebra linha.
        Exercicio da aula: Criar um cpf com parâmetos do print.
        OBS: Em python () ao final de um comando indica uma função em Python.
        OBS: O python é case sensitive.

    Strings:
        str: Tipo primitivo de texto, esse tipo é identificado por aspas.
        Caractere de escape:
            \: Com esse caractere a frente a aspa é ignarada como comando.
            OBS: Não recomendado por que fica estranho, além de que existem outros comandos com \.
        print(r''): Indica que nada devera ser executado.
        OBS: O python é uma linguagem de tipagem dinâmica, ou seja, consegue idenficar os tipos.
        OBS: As aspas podem estar uma dentro da outra desde que sejam diferentes. ("''") ou ('""')

    Tipos Primitivos:
        str - int - float - bool
        str: String
        int: Inteiro
        float: Real
        bool: Lógico
        casting:
            tipo(valor) isso transforma quando possível um valor de tipo x a y.
        Função:
            type(): indica o tipo do dado.
        OBS: Valores vazios quando castados para bool() são tratados como falso.

    Operadores Aritméticos:
        [+ , -, *, /, //, **, %, ()]
        Ordem de preceência:
            -> | () | ** | * | / | // | % | + | - |

    Variáveis:
        Regras: Iniciar com letra, pode conter números, separar por _, letras minúsculas.
        São apelidos dados a nossas regiões de memória.

    Formatação de string:
        f'strings:
            printf(f''{var}) <- melhor maneira de utilizar as strings.

    DESAFIO - Aula 8 dos conteúdos anteriores.
    --------------------------------------------------------------------------------------------------------------------
    Entrada de dados:
        input('texto que apresentará ao user: ') <- utilizado com variáveis.
        nome = tipo(input(''))

    Condições:
        IF, ELIF e ELSE.
        if condição (True já garante o verdadeiro):
            bloco
        elif condição:
            bloco
        else:
            bloco

    Operadores relacionais:
        == | > | >= | < | <= | !=
        Permite a comparação de dados sempre retornando um valor boolean.

    Operadores Lógicos:
        and | or | not | in | not in
        and(e): V | V -> True
        or(ou): F | V -> True
        not: inverte o valor (bool)!
        OBS: O not também é usada para testes com variáveis vazios já que se não tiver nada retorna True.

    len:
        len(): Indica o número de caracteres de uma string.
        Essa função funciona sobre o pano, ou seja, por ser um função para string podemos chamar também
        como string.__len__()

        OBS: Não funciona com números.
        OBS: em python tudo é objeto.

    Documentações e funções built-in:
        funções:
            isdecimal()
            isdigit()
        OBS: Quando houver qualquer dúvida, buscar consultar na documentação da função.

    Placeholder e elipisis:
        pass: Está palavra indica que o programador deixou para escrever o código depois e ao colocar
              esse termo o código continua funcionando sem erros.

        ...: faz a mesma coisa apesar de não ser comum.

    Formatando valores:
        Modificadores:
            :s - texto
            :d - inteiros
            :f - float
            :.(num)f - quantidade de casas decimais, float
            :caractere (<, > e ^)(quantidade)(tipos - s, d ou f)
        Função:
            zfill = preenche com 0 de acordo com tamanho passado.
            l/rjust(tam, 'caractere') = faz a formatação de acordo com tamanho e caractere.
            upper() - lower() - title()
        Fatiamento:
            Todas as strings possuem indices e portanto podemos acessar com os fatiamentos.
            Os indices podem ser positivos e negativos, os negativos fazem a conta de trás para frente da string.
            string[ini:fim:passo]
        Funções:
            len() | abs | type | print...

    Laços de repetição:
        While:
            while condição:
                bloco
        continue: essa palavra reservada pula para o próximo laço impedindo a exibição do bloco e
                  podemos para para certas coisas.
        break: encerra o laço.
        while/else:
            A expressão else pode ser usada após o laço que é quando a expressão do laço passa ser falsa,
            o que pode ser uma boa alternativa para exibições e calculos.
            while condição:
                bloco
            else: # Somente quando o laço se tornar falso.
                bloco

        iterações com strings (WHILE):
            iterar: Significa varrer um determinado objeto que possue indices.
            hardcode = explicitando um dado.

        For in:
            for c in range()/var:  range(start, stop, step)
                bloco

        For Else:
            break | continue
            métodos:
               startswith(''): responde se a primeira letra de uma string corresponde a digitada.

    Listas:
            Variáveis compostas!
            declaração:
                lista = [] ou list()
            métodos:
                trocar valor: lista[5] = 'Meu'
                append(): adc ao final
                insert(): adc na posição
                pop(): exclui o ultimo elemento ou posição indicada.
                del(): exclui o elemento indicado.
                clear(): limpa toda a lista
                extend(): a partir de uma lista já criada você consegue extender outra, ou seja, adicionar ao final.

    String metods:
        Split: Divide strings, de acordo com separador que nós indicamos.
        Join: Junta elementos.
        Enumerate: Enumera elementos iteraveis, é possível também indicar o elemento no qual o enumerate começa.
        --->    Ao utilizar o enumerate nós criamos uma tupla com o valor de enumerate + o valor de minha lista
                é possível também desempacotar, ou seja, o valor que foi devolvido agora possui dois valores e
                portanto basta duas variáveis receberem o valor.
        count: conta um elemento indicado.
        strip: exclui espaços inuteis.

    Desempacotamento de listas e python:
        lista[0, 1, 2]
        n1, n2, n3 = lista <- Da forma que descrevemos cada variável recebe um valor dalista, ou seja,
                              foram desempacotadas
        OBS: Em caso de mais valores do que váriavel utilizamos do *qualquer_nome
            Exemplo:
                n, m, *qualquer_nome = lista <- Qualquer nome gera uma lista com os valores restantes.
                OBS: qualquer_nome recebe qualquer valor que não esteja em outra variável, ou seja, se criarmos uma var
                     após o mesmo o valor é retirado da sua lista e pode ocorrer para qualquer número de var.

    Trocando valor de Variáveis:
        x = 10
        y = 15
        y, x = x, y -> Uma especie de desempacotamento.

    Operador Ternário:
        var = bloco True if condiçãoTrue else bloco False

    Expresões or:
        print(nome or 'Você não digitou nada')

    Funções Parte 1:
        definição:
            def nome(parametros)

        Utilizado para evitar repetição de códigos.
        Parametros:
            def func(msg, ...):
        Valores padrões:
            def func(msg='oi', num=0)

            func(num=5, msg='PICA')