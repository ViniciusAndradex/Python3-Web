Seção Básica:
    Comentários:
        # : Deixa o código comentado.
        """/''': São docstrings, porém servem como comentário.
        OBS: Padrão da comunidade, 2 espaços em caso de já existir algum dado
             na linha.

    Print:
        print(): Escreva.
        print('',''): Por padrão a vírgula representa espaço.
        print('','', sep='-'): Por padrão a vírgula representa espaço, o sep indica o tipo do separador.
        print('','', sep='-', end=''): Por padrão a vírgula representa espaço,
                                       o sep indica o tipo do separador, end='' não quebra linha.
        Exercicio da aula: Criar um cpf com parâmetos do print.
        OBS: Em python () ao final de um comando indica uma função em Python.
        OBS: O python é case sensitive.

    Strings:
        str: Tipo primitivo de texto, esse tipo é identificado por aspas.
        Caractere de escape:
            \: Com esse caractere a frente a aspa é ignarada como comando.
            OBS: Não recomendado por que fica estranho, além de que existem outros comandos com \.
        print(r''): Indica que nada devera ser executado.
        OBS: O python é uma linguagem de tipagem dinâmica, ou seja, consegue idenficar os tipos.
        OBS: As aspas podem estar uma dentro da outra desde que sejam diferentes. ("''") ou ('""')

    Tipos Primitivos:
        str - int - float - bool
        str: String
        int: Inteiro
        float: Real
        bool: Lógico
        casting:
            tipo(valor) isso transforma quando possível um valor de tipo x a y.
        Função:
            type(): indica o tipo do dado.
        OBS: Valores vazios quando castados para bool() são tratados como falso.

    Operadores Aritméticos:
        [+ , -, *, /, //, **, %, ()]
        Ordem de preceência:
            -> | () | ** | * | / | // | % | + | - |

    Variáveis:
        Regras: Iniciar com letra, pode conter números, separar por _, letras minúsculas.
        São apelidos dados a nossas regiões de memória.

    Formatação de string:
        f'strings:
            printf(f''{var}) <- melhor maneira de utilizar as strings.